server.port=8080
spring.main.allow-bean-definition-overriding=true
  # 配置ds0 和ds1两个数据源
spring.shardingsphere.datasource.names = seata
  #ds0 配置
spring.shardingsphere.datasource.seata.type = com.alibaba.druid.pool.DruidDataSource
spring.shardingsphere.datasource.seata.driver-class-name = com.mysql.jdbc.Driver
spring.shardingsphere.datasource.seata.jdbc-url = jdbc:mysql://192.168.1.220:3306/seata?characterEncoding=utf8&zeroDateTimeBehavior=convertToNull&useSSL=false
spring.shardingsphere.datasource.seata.username = ly
spring.shardingsphere.datasource.seata.password = 123456
  # 具体分表策略
  # 节点 ds0.t_order_0,ds0.t_order_1,ds1.t_order_0,ds1.t_order_1
spring.shardingsphere.sharding.tables.t_order.actual-data-nodes = seata.t_order_$->{0..2}
  # 分表字段id
spring.shardingsphere.sharding.tables.t_order.table-strategy.inline.sharding-column = id
  # 分表策略 根据id取模,确定数据最终落在那个表中
spring.shardingsphere.sharding.tables.t_order.table-strategy.inline.algorithm-expression = t_order_$->{id % 3}
  # 使用SNOWFLAKE算法生成主键
spring.shardingsphere.sharding.tables.t_order.key-generator.column = id
spring.shardingsphere.sharding.tables.t_order.key-generator.type = SNOWFLAKE
  #spring.shardingsphere.sharding.binding-tables=t_order
spring.shardingsphere.props.sql.show = true